<?php
/**
 * SmartSmsCampaign
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EgoiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * APIv3 (New)
 *
 * # Introduction This is our new version of API. We invite you to start using it and give us your feedback # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.  The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.      BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication  We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:     #!/bin/bash     curl -X GET 'https://api.egoiapp.com/my-account' \\     -H 'accept: application/json' \\     -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:     #!/bin/bash     curl -X POST 'http://api.egoiapp.com/tags' \\     -H 'accept: application/json' \\     -H 'Apikey: <YOUR_APY_KEY>' \\     -H 'Content-Type: application/json' \\     -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB.  # Timeouts Timeouts set a maximum waiting time on a request's response. Our API, sets a default timeout for each request and when breached, you'll receive an HTTP **408 (Request Timeout)** error code. You should take into consideration that response times can vary widely based on the complexity of the request, amount of data being analyzed, and the load on the system and workspace at the time of the query. When dealing with such errors, you should first attempt to reduce the complexity and amount of data under analysis, and only then, if problems are still occurring ask for support.  For all these reasons, the default timeout for each request is **10 Seconds** and any request that creates or modifies data (**POST**, **PATCH** and **PUT**) will have a timeout of **60 Seconds**. Specific timeouts may exist for specific requests, these can be found in the request's documentation.  # Callbacks A callback is an asynchronous API request that originates from the API server and is sent to the client in response to a previous request sent by that client.  The API will make a **POST** request to the address defined in the URL with the information regarding the event of interest and share data related to that event.  ***Note:*** Only http or https protocols are supported in the Url parameter.  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EgoiClient\EgoiModel;

use \ArrayAccess;
use \EgoiClient\ObjectSerializer;

/**
 * SmartSmsCampaign Class Doc Comment
 *
 * @category Class
 * @package  EgoiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SmartSmsCampaign implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SmartSmsCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'list_id' => 'int',
        'internal_name' => 'string',
        'campaign_content' => '\EgoiClient\EgoiModel\SmartSmsCampaignCampaignContent',
        'page_content' => '\EgoiClient\EgoiModel\CampaignSmartSmsPageContent',
        'sender_id' => 'int',
        'cname_id' => 'int',
        'options' => '\EgoiClient\EgoiModel\CampaignSmartSmsOptions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'list_id' => null,
        'internal_name' => null,
        'campaign_content' => null,
        'page_content' => null,
        'sender_id' => null,
        'cname_id' => null,
        'options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'list_id' => false,
		'internal_name' => false,
		'campaign_content' => false,
		'page_content' => false,
		'sender_id' => false,
		'cname_id' => false,
		'options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'list_id' => 'list_id',
        'internal_name' => 'internal_name',
        'campaign_content' => 'campaign_content',
        'page_content' => 'page_content',
        'sender_id' => 'sender_id',
        'cname_id' => 'cname_id',
        'options' => 'options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'list_id' => 'setListId',
        'internal_name' => 'setInternalName',
        'campaign_content' => 'setCampaignContent',
        'page_content' => 'setPageContent',
        'sender_id' => 'setSenderId',
        'cname_id' => 'setCnameId',
        'options' => 'setOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'list_id' => 'getListId',
        'internal_name' => 'getInternalName',
        'campaign_content' => 'getCampaignContent',
        'page_content' => 'getPageContent',
        'sender_id' => 'getSenderId',
        'cname_id' => 'getCnameId',
        'options' => 'getOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('list_id', $data ?? [], null);
        $this->setIfExists('internal_name', $data ?? [], null);
        $this->setIfExists('campaign_content', $data ?? [], null);
        $this->setIfExists('page_content', $data ?? [], null);
        $this->setIfExists('sender_id', $data ?? [], null);
        $this->setIfExists('cname_id', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['list_id'] === null) {
            $invalidProperties[] = "'list_id' can't be null";
        }
        if (($this->container['list_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'list_id', must be bigger than or equal to 1.";
        }

        if ($this->container['internal_name'] === null) {
            $invalidProperties[] = "'internal_name' can't be null";
        }
        if ($this->container['campaign_content'] === null) {
            $invalidProperties[] = "'campaign_content' can't be null";
        }
        if ($this->container['page_content'] === null) {
            $invalidProperties[] = "'page_content' can't be null";
        }
        if (!is_null($this->container['sender_id']) && ($this->container['sender_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'sender_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cname_id']) && ($this->container['cname_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'cname_id', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets list_id
     *
     * @return int
     */
    public function getListId()
    {
        return $this->container['list_id'];
    }

    /**
     * Sets list_id
     *
     * @param int $list_id list_id
     *
     * @return self
     */
    public function setListId($list_id)
    {

        if (($list_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $list_id when calling SmartSmsCampaign., must be bigger than or equal to 1.');
        }


        if (is_null($list_id)) {
            throw new \InvalidArgumentException('non-nullable list_id cannot be null');
        }

        $this->container['list_id'] = $list_id;

        return $this;
    }

    /**
     * Gets internal_name
     *
     * @return string
     */
    public function getInternalName()
    {
        return $this->container['internal_name'];
    }

    /**
     * Sets internal_name
     *
     * @param string $internal_name Smart SMS campaign internal name
     *
     * @return self
     */
    public function setInternalName($internal_name)
    {

        if (is_null($internal_name)) {
            throw new \InvalidArgumentException('non-nullable internal_name cannot be null');
        }

        $this->container['internal_name'] = $internal_name;

        return $this;
    }

    /**
     * Gets campaign_content
     *
     * @return \EgoiClient\EgoiModel\SmartSmsCampaignCampaignContent
     */
    public function getCampaignContent()
    {
        return $this->container['campaign_content'];
    }

    /**
     * Sets campaign_content
     *
     * @param \EgoiClient\EgoiModel\SmartSmsCampaignCampaignContent $campaign_content campaign_content
     *
     * @return self
     */
    public function setCampaignContent($campaign_content)
    {

        if (is_null($campaign_content)) {
            throw new \InvalidArgumentException('non-nullable campaign_content cannot be null');
        }

        $this->container['campaign_content'] = $campaign_content;

        return $this;
    }

    /**
     * Gets page_content
     *
     * @return \EgoiClient\EgoiModel\CampaignSmartSmsPageContent
     */
    public function getPageContent()
    {
        return $this->container['page_content'];
    }

    /**
     * Sets page_content
     *
     * @param \EgoiClient\EgoiModel\CampaignSmartSmsPageContent $page_content page_content
     *
     * @return self
     */
    public function setPageContent($page_content)
    {

        if (is_null($page_content)) {
            throw new \InvalidArgumentException('non-nullable page_content cannot be null');
        }

        $this->container['page_content'] = $page_content;

        return $this;
    }

    /**
     * Gets sender_id
     *
     * @return int|null
     */
    public function getSenderId()
    {
        return $this->container['sender_id'];
    }

    /**
     * Sets sender_id
     *
     * @param int|null $sender_id sender_id
     *
     * @return self
     */
    public function setSenderId($sender_id)
    {

        if (!is_null($sender_id) && ($sender_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $sender_id when calling SmartSmsCampaign., must be bigger than or equal to 1.');
        }


        if (is_null($sender_id)) {
            throw new \InvalidArgumentException('non-nullable sender_id cannot be null');
        }

        $this->container['sender_id'] = $sender_id;

        return $this;
    }

    /**
     * Gets cname_id
     *
     * @return int|null
     */
    public function getCnameId()
    {
        return $this->container['cname_id'];
    }

    /**
     * Sets cname_id
     *
     * @param int|null $cname_id cname_id
     *
     * @return self
     */
    public function setCnameId($cname_id)
    {

        if (!is_null($cname_id) && ($cname_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $cname_id when calling SmartSmsCampaign., must be bigger than or equal to 1.');
        }


        if (is_null($cname_id)) {
            throw new \InvalidArgumentException('non-nullable cname_id cannot be null');
        }

        $this->container['cname_id'] = $cname_id;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \EgoiClient\EgoiModel\CampaignSmartSmsOptions|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \EgoiClient\EgoiModel\CampaignSmartSmsOptions|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {

        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }

        $this->container['options'] = $options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


