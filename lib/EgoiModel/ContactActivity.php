<?php
/**
 * ContactActivity
 *
 * PHP version 5
 *
 * @category Class
 * @package  EgoiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * APIv3 (Beta)
 *
 * # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EgoiClient\EgoiModel;

use \ArrayAccess;
use \EgoiClient\ObjectSerializer;

/**
 * ContactActivity Class Doc Comment
 *
 * @category Class
 * @description Contact activity schema
 * @package  EgoiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContactActivity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContactActivity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date' => '\DateTime',
        'action_name' => 'string',
        'action_data' => '\EgoiClient\EgoiModel\ContactActivityClickAllOfActionData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'date' => 'date-time',
        'action_name' => null,
        'action_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'action_name' => 'action_name',
        'action_data' => 'action_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'action_name' => 'setActionName',
        'action_data' => 'setActionData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'action_name' => 'getActionName',
        'action_data' => 'getActionData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ACTION_NAME_EMAIL_OPEN = 'email_open';
    const ACTION_NAME_FORWARD = 'forward';
    const ACTION_NAME_CONVERSION = 'conversion';
    const ACTION_NAME_EMAIL_SEND = 'email_send';
    const ACTION_NAME_SMS_SEND = 'sms_send';
    const ACTION_NAME_VOICE_SEND = 'voice_send';
    const ACTION_NAME_MMS_SEND = 'mms_send';
    const ACTION_NAME_SMS_REPORT = 'sms_report';
    const ACTION_NAME_VOICE_REPORT = 'voice_report';
    const ACTION_NAME_INVITATION_SEND = 'invitation_send';
    const ACTION_NAME_INVITATION_OPEN = 'invitation_open';
    const ACTION_NAME_MMS_OPEN = 'mms_open';
    const ACTION_NAME_UNSUBSCRIBE = 'unsubscribe';
    const ACTION_NAME_EMAIL_SOFT_BOUNCE = 'email_soft_bounce';
    const ACTION_NAME_EMAIL_HARD_BOUNCE = 'email_hard_bounce';
    const ACTION_NAME_SUBSCRIPTION = 'subscription';
    const ACTION_NAME_RESUBSCRIPTION = 'resubscription';
    const ACTION_NAME_UNSUBSCRIBE_REASON = 'unsubscribe_reason';
    const ACTION_NAME_FACEBOOK_LIKE = 'facebook_like';
    const ACTION_NAME_SOCIAL_SHARE = 'social_share';
    const ACTION_NAME_UNSUBSCRIBE_MANUAL = 'unsubscribe_manual';
    const ACTION_NAME_DOUBLE_OPTIN = 'double_optin';
    const ACTION_NAME_DOUBLE_OPTIN_RESEND = 'double_optin_resend';
    const ACTION_NAME_EMAIL_SPAM_COMPLAINT = 'email_spam_complaint';
    const ACTION_NAME_EMAIL_FIELD_DISABLE = 'email_field_disable';
    const ACTION_NAME_CELLPHONE_FIELD_DISABLE = 'cellphone_field_disable';
    const ACTION_NAME_PHONE_FIELD_DISABLE = 'phone_field_disable';
    const ACTION_NAME_UNSUBSCRIBE_API = 'unsubscribe_api';
    const ACTION_NAME_EMAIL_FIELD_ENABLE = 'email_field_enable';
    const ACTION_NAME_CELLPHONE_FIELD_ENABLE = 'cellphone_field_enable';
    const ACTION_NAME_PHONE_FIELD_ENABLE = 'phone_field_enable';
    const ACTION_NAME_EDIT_SUBSCRIPTION = 'edit_subscription';
    const ACTION_NAME_DOUBLE_OPTEDIT = 'double_optedit';
    const ACTION_NAME_AUTOMATION_EVENT = 'automation_event';
    const ACTION_NAME_PUSH_SEND = 'push_send';
    const ACTION_NAME_PUSH_OPEN = 'push_open';
    const ACTION_NAME_PUSH_RECEIVED = 'push_received';
    const ACTION_NAME_PUSH_ERROR = 'push_error';
    const ACTION_NAME_PUSH_CANCELED = 'push_canceled';
    const ACTION_NAME_REPLY_TO_EMAIL = 'reply_to_email';
    const ACTION_NAME_WEB_PUSH_SEND = 'web_push_send';
    const ACTION_NAME_WEB_PUSH_DELIVERED = 'web_push_delivered';
    const ACTION_NAME_WEB_PUSH_OPEN = 'web_push_open';
    const ACTION_NAME_WEB_PUSH_BOUNCE = 'web_push_bounce';
    const ACTION_NAME_WEB_PUSH_SUBSCRIPTION = 'web_push_subscription';
    const ACTION_NAME_WEB_PUSH_UNSUBSCRIPTION = 'web_push_unsubscription';
    const ACTION_NAME_ADD_PUSH_CONTACT = 'add_push_contact';
    const ACTION_NAME_REMOVE_PUSH_CONTACT = 'remove_push_contact';
    const ACTION_NAME_FORGET_SUBSCRIPTION = 'forget_subscription';
    const ACTION_NAME_CHANGE_CONSENT = 'change_consent';
    const ACTION_NAME_PUSH_UNSUBSCRIPTION = 'push_unsubscription';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionNameAllowableValues()
    {
        return [
            self::ACTION_NAME_EMAIL_OPEN,
            self::ACTION_NAME_FORWARD,
            self::ACTION_NAME_CONVERSION,
            self::ACTION_NAME_EMAIL_SEND,
            self::ACTION_NAME_SMS_SEND,
            self::ACTION_NAME_VOICE_SEND,
            self::ACTION_NAME_MMS_SEND,
            self::ACTION_NAME_SMS_REPORT,
            self::ACTION_NAME_VOICE_REPORT,
            self::ACTION_NAME_INVITATION_SEND,
            self::ACTION_NAME_INVITATION_OPEN,
            self::ACTION_NAME_MMS_OPEN,
            self::ACTION_NAME_UNSUBSCRIBE,
            self::ACTION_NAME_EMAIL_SOFT_BOUNCE,
            self::ACTION_NAME_EMAIL_HARD_BOUNCE,
            self::ACTION_NAME_SUBSCRIPTION,
            self::ACTION_NAME_RESUBSCRIPTION,
            self::ACTION_NAME_UNSUBSCRIBE_REASON,
            self::ACTION_NAME_FACEBOOK_LIKE,
            self::ACTION_NAME_SOCIAL_SHARE,
            self::ACTION_NAME_UNSUBSCRIBE_MANUAL,
            self::ACTION_NAME_DOUBLE_OPTIN,
            self::ACTION_NAME_DOUBLE_OPTIN_RESEND,
            self::ACTION_NAME_EMAIL_SPAM_COMPLAINT,
            self::ACTION_NAME_EMAIL_FIELD_DISABLE,
            self::ACTION_NAME_CELLPHONE_FIELD_DISABLE,
            self::ACTION_NAME_PHONE_FIELD_DISABLE,
            self::ACTION_NAME_UNSUBSCRIBE_API,
            self::ACTION_NAME_EMAIL_FIELD_ENABLE,
            self::ACTION_NAME_CELLPHONE_FIELD_ENABLE,
            self::ACTION_NAME_PHONE_FIELD_ENABLE,
            self::ACTION_NAME_EDIT_SUBSCRIPTION,
            self::ACTION_NAME_DOUBLE_OPTEDIT,
            self::ACTION_NAME_AUTOMATION_EVENT,
            self::ACTION_NAME_PUSH_SEND,
            self::ACTION_NAME_PUSH_OPEN,
            self::ACTION_NAME_PUSH_RECEIVED,
            self::ACTION_NAME_PUSH_ERROR,
            self::ACTION_NAME_PUSH_CANCELED,
            self::ACTION_NAME_REPLY_TO_EMAIL,
            self::ACTION_NAME_WEB_PUSH_SEND,
            self::ACTION_NAME_WEB_PUSH_DELIVERED,
            self::ACTION_NAME_WEB_PUSH_OPEN,
            self::ACTION_NAME_WEB_PUSH_BOUNCE,
            self::ACTION_NAME_WEB_PUSH_SUBSCRIPTION,
            self::ACTION_NAME_WEB_PUSH_UNSUBSCRIPTION,
            self::ACTION_NAME_ADD_PUSH_CONTACT,
            self::ACTION_NAME_REMOVE_PUSH_CONTACT,
            self::ACTION_NAME_FORGET_SUBSCRIPTION,
            self::ACTION_NAME_CHANGE_CONSENT,
            self::ACTION_NAME_PUSH_UNSUBSCRIPTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['action_name'] = isset($data['action_name']) ? $data['action_name'] : null;
        $this->container['action_data'] = isset($data['action_data']) ? $data['action_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActionNameAllowableValues();
        if (!is_null($this->container['action_name']) && !in_array($this->container['action_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'action_name', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date The date and time
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets action_name
     *
     * @return string|null
     */
    public function getActionName()
    {
        return $this->container['action_name'];
    }

    /**
     * Sets action_name
     *
     * @param string|null $action_name Action name
     *
     * @return $this
     */
    public function setActionName($action_name)
    {
        $allowedValues = $this->getActionNameAllowableValues();
        if (!is_null($action_name) && !in_array($action_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'action_name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action_name'] = $action_name;

        return $this;
    }

    /**
     * Gets action_data
     *
     * @return \EgoiClient\EgoiModel\ContactActivityClickAllOfActionData|null
     */
    public function getActionData()
    {
        return $this->container['action_data'];
    }

    /**
     * Sets action_data
     *
     * @param \EgoiClient\EgoiModel\ContactActivityClickAllOfActionData|null $action_data action_data
     *
     * @return $this
     */
    public function setActionData($action_data)
    {
        $this->container['action_data'] = $action_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


