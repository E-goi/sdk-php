<?php
/**
 * ComplexContactAllOfEmailStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  EgoiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * APIv3 (New)
 *
 * # Introduction This is our new version of API. We invite you to start using it and give us your feedback # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB.  # Timeouts Timeouts set a maximum waiting time on a request's response. Our API, sets a default timeout for each request and when breached, you'll receive an HTTP **408 (Request Timeout)** error code. You should take into consideration that response times can vary widely based on the complexity of the request, amount of data being analyzed, and the load on the system and workspace at the time of the query. When dealing with such errors, you should first attempt to reduce the complexity and amount of data under analysis, and only then, if problems are still occurring ask for support.  For all these reasons, the default timeout for each request is **10 Seconds** and any request that creates or modifies data (**POST**, **PATCH** and **PUT**) will have a timeout of **60 Seconds**. Specific timeouts may exist for specific requests, these can be found in the request's documentation.  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EgoiClient\EgoiModel;

use \ArrayAccess;
use \EgoiClient\ObjectSerializer;

/**
 * ComplexContactAllOfEmailStats Class Doc Comment
 *
 * @category Class
 * @description Email stats of the contact
 * @package  EgoiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComplexContactAllOfEmailStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ComplexContact_allOf_email_stats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sent' => 'int',
        'opens' => 'int',
        'clicks' => 'int',
        'soft_bounces' => 'int',
        'hard_bounces' => 'int',
        'forwards' => 'int',
        'conversions' => 'int',
        'social_actions' => 'int',
        'last_send_date' => '\DateTime',
        'last_open_date' => '\DateTime',
        'last_click_date' => '\DateTime',
        'last_open_country' => 'string',
        'last_open_region' => 'string',
        'last_open_city' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'sent' => null,
        'opens' => null,
        'clicks' => null,
        'soft_bounces' => null,
        'hard_bounces' => null,
        'forwards' => null,
        'conversions' => null,
        'social_actions' => null,
        'last_send_date' => 'date-time',
        'last_open_date' => 'date-time',
        'last_click_date' => 'date-time',
        'last_open_country' => null,
        'last_open_region' => null,
        'last_open_city' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sent' => 'sent',
        'opens' => 'opens',
        'clicks' => 'clicks',
        'soft_bounces' => 'soft_bounces',
        'hard_bounces' => 'hard_bounces',
        'forwards' => 'forwards',
        'conversions' => 'conversions',
        'social_actions' => 'social_actions',
        'last_send_date' => 'last_send_date',
        'last_open_date' => 'last_open_date',
        'last_click_date' => 'last_click_date',
        'last_open_country' => 'last_open_country',
        'last_open_region' => 'last_open_region',
        'last_open_city' => 'last_open_city'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sent' => 'setSent',
        'opens' => 'setOpens',
        'clicks' => 'setClicks',
        'soft_bounces' => 'setSoftBounces',
        'hard_bounces' => 'setHardBounces',
        'forwards' => 'setForwards',
        'conversions' => 'setConversions',
        'social_actions' => 'setSocialActions',
        'last_send_date' => 'setLastSendDate',
        'last_open_date' => 'setLastOpenDate',
        'last_click_date' => 'setLastClickDate',
        'last_open_country' => 'setLastOpenCountry',
        'last_open_region' => 'setLastOpenRegion',
        'last_open_city' => 'setLastOpenCity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sent' => 'getSent',
        'opens' => 'getOpens',
        'clicks' => 'getClicks',
        'soft_bounces' => 'getSoftBounces',
        'hard_bounces' => 'getHardBounces',
        'forwards' => 'getForwards',
        'conversions' => 'getConversions',
        'social_actions' => 'getSocialActions',
        'last_send_date' => 'getLastSendDate',
        'last_open_date' => 'getLastOpenDate',
        'last_click_date' => 'getLastClickDate',
        'last_open_country' => 'getLastOpenCountry',
        'last_open_region' => 'getLastOpenRegion',
        'last_open_city' => 'getLastOpenCity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sent'] = isset($data['sent']) ? $data['sent'] : null;
        $this->container['opens'] = isset($data['opens']) ? $data['opens'] : null;
        $this->container['clicks'] = isset($data['clicks']) ? $data['clicks'] : null;
        $this->container['soft_bounces'] = isset($data['soft_bounces']) ? $data['soft_bounces'] : null;
        $this->container['hard_bounces'] = isset($data['hard_bounces']) ? $data['hard_bounces'] : null;
        $this->container['forwards'] = isset($data['forwards']) ? $data['forwards'] : null;
        $this->container['conversions'] = isset($data['conversions']) ? $data['conversions'] : null;
        $this->container['social_actions'] = isset($data['social_actions']) ? $data['social_actions'] : null;
        $this->container['last_send_date'] = isset($data['last_send_date']) ? $data['last_send_date'] : null;
        $this->container['last_open_date'] = isset($data['last_open_date']) ? $data['last_open_date'] : null;
        $this->container['last_click_date'] = isset($data['last_click_date']) ? $data['last_click_date'] : null;
        $this->container['last_open_country'] = isset($data['last_open_country']) ? $data['last_open_country'] : null;
        $this->container['last_open_region'] = isset($data['last_open_region']) ? $data['last_open_region'] : null;
        $this->container['last_open_city'] = isset($data['last_open_city']) ? $data['last_open_city'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sent
     *
     * @return int|null
     */
    public function getSent()
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param int|null $sent Emails sent to the contact
     *
     * @return $this
     */
    public function setSent($sent)
    {
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets opens
     *
     * @return int|null
     */
    public function getOpens()
    {
        return $this->container['opens'];
    }

    /**
     * Sets opens
     *
     * @param int|null $opens Emails opened by the contact
     *
     * @return $this
     */
    public function setOpens($opens)
    {
        $this->container['opens'] = $opens;

        return $this;
    }

    /**
     * Gets clicks
     *
     * @return int|null
     */
    public function getClicks()
    {
        return $this->container['clicks'];
    }

    /**
     * Sets clicks
     *
     * @param int|null $clicks Total number of clicks made by the contact
     *
     * @return $this
     */
    public function setClicks($clicks)
    {
        $this->container['clicks'] = $clicks;

        return $this;
    }

    /**
     * Gets soft_bounces
     *
     * @return int|null
     */
    public function getSoftBounces()
    {
        return $this->container['soft_bounces'];
    }

    /**
     * Sets soft_bounces
     *
     * @param int|null $soft_bounces Soft bounces for the contact
     *
     * @return $this
     */
    public function setSoftBounces($soft_bounces)
    {
        $this->container['soft_bounces'] = $soft_bounces;

        return $this;
    }

    /**
     * Gets hard_bounces
     *
     * @return int|null
     */
    public function getHardBounces()
    {
        return $this->container['hard_bounces'];
    }

    /**
     * Sets hard_bounces
     *
     * @param int|null $hard_bounces Hard bounces for the contact
     *
     * @return $this
     */
    public function setHardBounces($hard_bounces)
    {
        $this->container['hard_bounces'] = $hard_bounces;

        return $this;
    }

    /**
     * Gets forwards
     *
     * @return int|null
     */
    public function getForwards()
    {
        return $this->container['forwards'];
    }

    /**
     * Sets forwards
     *
     * @param int|null $forwards Emails forwarded by the contact
     *
     * @return $this
     */
    public function setForwards($forwards)
    {
        $this->container['forwards'] = $forwards;

        return $this;
    }

    /**
     * Gets conversions
     *
     * @return int|null
     */
    public function getConversions()
    {
        return $this->container['conversions'];
    }

    /**
     * Sets conversions
     *
     * @param int|null $conversions Total of conversions
     *
     * @return $this
     */
    public function setConversions($conversions)
    {
        $this->container['conversions'] = $conversions;

        return $this;
    }

    /**
     * Gets social_actions
     *
     * @return int|null
     */
    public function getSocialActions()
    {
        return $this->container['social_actions'];
    }

    /**
     * Sets social_actions
     *
     * @param int|null $social_actions Total of social actions for the contact
     *
     * @return $this
     */
    public function setSocialActions($social_actions)
    {
        $this->container['social_actions'] = $social_actions;

        return $this;
    }

    /**
     * Gets last_send_date
     *
     * @return \DateTime|null
     */
    public function getLastSendDate()
    {
        return $this->container['last_send_date'];
    }

    /**
     * Sets last_send_date
     *
     * @param \DateTime|null $last_send_date Date of the last email sent to the contact
     *
     * @return $this
     */
    public function setLastSendDate($last_send_date)
    {
        $this->container['last_send_date'] = $last_send_date;

        return $this;
    }

    /**
     * Gets last_open_date
     *
     * @return \DateTime|null
     */
    public function getLastOpenDate()
    {
        return $this->container['last_open_date'];
    }

    /**
     * Sets last_open_date
     *
     * @param \DateTime|null $last_open_date Date of the last email open of the contact
     *
     * @return $this
     */
    public function setLastOpenDate($last_open_date)
    {
        $this->container['last_open_date'] = $last_open_date;

        return $this;
    }

    /**
     * Gets last_click_date
     *
     * @return \DateTime|null
     */
    public function getLastClickDate()
    {
        return $this->container['last_click_date'];
    }

    /**
     * Sets last_click_date
     *
     * @param \DateTime|null $last_click_date Date of the last email click of the contact
     *
     * @return $this
     */
    public function setLastClickDate($last_click_date)
    {
        $this->container['last_click_date'] = $last_click_date;

        return $this;
    }

    /**
     * Gets last_open_country
     *
     * @return string|null
     */
    public function getLastOpenCountry()
    {
        return $this->container['last_open_country'];
    }

    /**
     * Sets last_open_country
     *
     * @param string|null $last_open_country Country where the last email for that contact was opened
     *
     * @return $this
     */
    public function setLastOpenCountry($last_open_country)
    {
        $this->container['last_open_country'] = $last_open_country;

        return $this;
    }

    /**
     * Gets last_open_region
     *
     * @return string|null
     */
    public function getLastOpenRegion()
    {
        return $this->container['last_open_region'];
    }

    /**
     * Sets last_open_region
     *
     * @param string|null $last_open_region Region where the last email for that contact was opened
     *
     * @return $this
     */
    public function setLastOpenRegion($last_open_region)
    {
        $this->container['last_open_region'] = $last_open_region;

        return $this;
    }

    /**
     * Gets last_open_city
     *
     * @return string|null
     */
    public function getLastOpenCity()
    {
        return $this->container['last_open_city'];
    }

    /**
     * Sets last_open_city
     *
     * @param string|null $last_open_city City where the last email for that contact was opened
     *
     * @return $this
     */
    public function setLastOpenCity($last_open_city)
    {
        $this->container['last_open_city'] = $last_open_city;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


