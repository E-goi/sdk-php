<?php
/**
 * ImportBulkRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  EgoiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * APIv3 (Beta)
 *
 * # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EgoiClient\EgoiModel;

use \ArrayAccess;
use \EgoiClient\ObjectSerializer;

/**
 * ImportBulkRequest Class Doc Comment
 *
 * @category Class
 * @description Contact import bulk request schema
 * @package  EgoiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ImportBulkRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImportBulkRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'compare_field' => 'string',
        'replace_existing_contacts' => 'bool',
        'send_autoresponder' => 'bool',
        'contacts' => '\EgoiClient\EgoiModel\Contact[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'compare_field' => null,
        'replace_existing_contacts' => null,
        'send_autoresponder' => null,
        'contacts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'compare_field' => 'compare_field',
        'replace_existing_contacts' => 'replace_existing_contacts',
        'send_autoresponder' => 'send_autoresponder',
        'contacts' => 'contacts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'compare_field' => 'setCompareField',
        'replace_existing_contacts' => 'setReplaceExistingContacts',
        'send_autoresponder' => 'setSendAutoresponder',
        'contacts' => 'setContacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'compare_field' => 'getCompareField',
        'replace_existing_contacts' => 'getReplaceExistingContacts',
        'send_autoresponder' => 'getSendAutoresponder',
        'contacts' => 'getContacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const COMPARE_FIELD_EMAIL = 'email';
    const COMPARE_FIELD_CELLPHONE = 'cellphone';
    const COMPARE_FIELD_PHONE = 'phone';
    const COMPARE_FIELD_FIRST_NAME = 'first_name';
    const COMPARE_FIELD_LAST_NAME = 'last_name';
    const COMPARE_FIELD_BIRTH_DATE = 'birth_date';
    const COMPARE_FIELD_EXTRA_X = 'extra_X';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompareFieldAllowableValues()
    {
        return [
            self::COMPARE_FIELD_EMAIL,
            self::COMPARE_FIELD_CELLPHONE,
            self::COMPARE_FIELD_PHONE,
            self::COMPARE_FIELD_FIRST_NAME,
            self::COMPARE_FIELD_LAST_NAME,
            self::COMPARE_FIELD_BIRTH_DATE,
            self::COMPARE_FIELD_EXTRA_X,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['compare_field'] = isset($data['compare_field']) ? $data['compare_field'] : null;
        $this->container['replace_existing_contacts'] = isset($data['replace_existing_contacts']) ? $data['replace_existing_contacts'] : false;
        $this->container['send_autoresponder'] = isset($data['send_autoresponder']) ? $data['send_autoresponder'] : false;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['compare_field'] === null) {
            $invalidProperties[] = "'compare_field' can't be null";
        }
        $allowedValues = $this->getCompareFieldAllowableValues();
        if (!is_null($this->container['compare_field']) && !in_array($this->container['compare_field'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'compare_field', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['contacts'] === null) {
            $invalidProperties[] = "'contacts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets compare_field
     *
     * @return string
     */
    public function getCompareField()
    {
        return $this->container['compare_field'];
    }

    /**
     * Sets compare_field
     *
     * @param string $compare_field Field ID which will be mapped for comparison to prevent duplicates. If it is an extra field,                         append the prefix 'extra_' to it (e. g. 'extra_1')
     *
     * @return $this
     */
    public function setCompareField($compare_field)
    {
        $allowedValues = $this->getCompareFieldAllowableValues();
        if (!in_array($compare_field, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'compare_field', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['compare_field'] = $compare_field;

        return $this;
    }

    /**
     * Gets replace_existing_contacts
     *
     * @return bool|null
     */
    public function getReplaceExistingContacts()
    {
        return $this->container['replace_existing_contacts'];
    }

    /**
     * Sets replace_existing_contacts
     *
     * @param bool|null $replace_existing_contacts False to add new contacts only, true to replace existing contacts
     *
     * @return $this
     */
    public function setReplaceExistingContacts($replace_existing_contacts)
    {
        $this->container['replace_existing_contacts'] = $replace_existing_contacts;

        return $this;
    }

    /**
     * Gets send_autoresponder
     *
     * @return bool|null
     */
    public function getSendAutoresponder()
    {
        return $this->container['send_autoresponder'];
    }

    /**
     * Sets send_autoresponder
     *
     * @param bool|null $send_autoresponder True to send each imported contact the autoresponder sequence you have previously set up for                         sign-ups in this mailing list
     *
     * @return $this
     */
    public function setSendAutoresponder($send_autoresponder)
    {
        $this->container['send_autoresponder'] = $send_autoresponder;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \EgoiClient\EgoiModel\Contact[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \EgoiClient\EgoiModel\Contact[] $contacts Array of contacts to import
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


