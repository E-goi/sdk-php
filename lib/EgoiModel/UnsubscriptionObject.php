<?php
/**
 * UnsubscriptionObject
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EgoiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * APIv3 (New)
 *
 * # Introduction This is our new version of API. We invite you to start using it and give us your feedback # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.  The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.      BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication  We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:     #!/bin/bash     curl -X GET 'https://api.egoiapp.com/my-account' \\     -H 'accept: application/json' \\     -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:     #!/bin/bash     curl -X POST 'http://api.egoiapp.com/tags' \\     -H 'accept: application/json' \\     -H 'Apikey: <YOUR_APY_KEY>' \\     -H 'Content-Type: application/json' \\     -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB.  # Timeouts Timeouts set a maximum waiting time on a request's response. Our API, sets a default timeout for each request and when breached, you'll receive an HTTP **408 (Request Timeout)** error code. You should take into consideration that response times can vary widely based on the complexity of the request, amount of data being analyzed, and the load on the system and workspace at the time of the query. When dealing with such errors, you should first attempt to reduce the complexity and amount of data under analysis, and only then, if problems are still occurring ask for support.  For all these reasons, the default timeout for each request is **10 Seconds** and any request that creates or modifies data (**POST**, **PATCH** and **PUT**) will have a timeout of **60 Seconds**. Specific timeouts may exist for specific requests, these can be found in the request's documentation.  # Callbacks A callback is an asynchronous API request that originates from the API server and is sent to the client in response to a previous request sent by that client.  The API will make a **POST** request to the address defined in the URL with the information regarding the event of interest and share data related to that event.  <a href='/usecases/callbacks/' target='_blank'>[Go to callbacks documentation]</a>  ***Note:*** Only http or https protocols are supported in the Url parameter.  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EgoiClient\EgoiModel;

use \ArrayAccess;
use \EgoiClient\ObjectSerializer;

/**
 * UnsubscriptionObject Class Doc Comment
 *
 * @category Class
 * @package  EgoiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UnsubscriptionObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'unsubscriptionObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unsubscription_method' => 'string',
        'unsubscription_reason' => 'string',
        'unsubscription_observation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unsubscription_method' => null,
        'unsubscription_reason' => null,
        'unsubscription_observation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'unsubscription_method' => false,
		'unsubscription_reason' => false,
		'unsubscription_observation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unsubscription_method' => 'unsubscription_method',
        'unsubscription_reason' => 'unsubscription_reason',
        'unsubscription_observation' => 'unsubscription_observation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unsubscription_method' => 'setUnsubscriptionMethod',
        'unsubscription_reason' => 'setUnsubscriptionReason',
        'unsubscription_observation' => 'setUnsubscriptionObservation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unsubscription_method' => 'getUnsubscriptionMethod',
        'unsubscription_reason' => 'getUnsubscriptionReason',
        'unsubscription_observation' => 'getUnsubscriptionObservation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNSUBSCRIPTION_METHOD_MANUAL = 'manual';
    public const UNSUBSCRIPTION_METHOD_FORM = 'form';
    public const UNSUBSCRIPTION_METHOD_UNSUBSCRIBE_LINK = 'unsubscribe_link';
    public const UNSUBSCRIPTION_METHOD_BOUNCE = 'bounce';
    public const UNSUBSCRIPTION_METHOD_API = 'api';
    public const UNSUBSCRIPTION_REASON_NOT_INTERESTED = 'not_interested';
    public const UNSUBSCRIPTION_REASON_LACK_OF_TIME = 'lack_of_time';
    public const UNSUBSCRIPTION_REASON_EMAIL_ADDRESS_CHANGE = 'email_address_change';
    public const UNSUBSCRIPTION_REASON_SPAM = 'spam';
    public const UNSUBSCRIPTION_REASON_OTHER = 'other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnsubscriptionMethodAllowableValues()
    {
        return [
            self::UNSUBSCRIPTION_METHOD_MANUAL,
            self::UNSUBSCRIPTION_METHOD_FORM,
            self::UNSUBSCRIPTION_METHOD_UNSUBSCRIBE_LINK,
            self::UNSUBSCRIPTION_METHOD_BOUNCE,
            self::UNSUBSCRIPTION_METHOD_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnsubscriptionReasonAllowableValues()
    {
        return [
            self::UNSUBSCRIPTION_REASON_NOT_INTERESTED,
            self::UNSUBSCRIPTION_REASON_LACK_OF_TIME,
            self::UNSUBSCRIPTION_REASON_EMAIL_ADDRESS_CHANGE,
            self::UNSUBSCRIPTION_REASON_SPAM,
            self::UNSUBSCRIPTION_REASON_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('unsubscription_method', $data ?? [], null);
        $this->setIfExists('unsubscription_reason', $data ?? [], null);
        $this->setIfExists('unsubscription_observation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUnsubscriptionMethodAllowableValues();
        if (!is_null($this->container['unsubscription_method']) && !in_array($this->container['unsubscription_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unsubscription_method', must be one of '%s'",
                $this->container['unsubscription_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUnsubscriptionReasonAllowableValues();
        if (!is_null($this->container['unsubscription_reason']) && !in_array($this->container['unsubscription_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unsubscription_reason', must be one of '%s'",
                $this->container['unsubscription_reason'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unsubscription_method
     *
     * @return string|null
     */
    public function getUnsubscriptionMethod()
    {
        return $this->container['unsubscription_method'];
    }

    /**
     * Sets unsubscription_method
     *
     * @param string|null $unsubscription_method Unsubcription Method
     *
     * @return self
     */
    public function setUnsubscriptionMethod($unsubscription_method)
    {
        $allowedValues = $this->getUnsubscriptionMethodAllowableValues();
        if (!is_null($unsubscription_method) && !in_array($unsubscription_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unsubscription_method', must be one of '%s'",
                    $unsubscription_method,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($unsubscription_method)) {
            throw new \InvalidArgumentException('non-nullable unsubscription_method cannot be null');
        }

        $this->container['unsubscription_method'] = $unsubscription_method;

        return $this;
    }

    /**
     * Gets unsubscription_reason
     *
     * @return string|null
     */
    public function getUnsubscriptionReason()
    {
        return $this->container['unsubscription_reason'];
    }

    /**
     * Sets unsubscription_reason
     *
     * @param string|null $unsubscription_reason Unsubcription Reason
     *
     * @return self
     */
    public function setUnsubscriptionReason($unsubscription_reason)
    {
        $allowedValues = $this->getUnsubscriptionReasonAllowableValues();
        if (!is_null($unsubscription_reason) && !in_array($unsubscription_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unsubscription_reason', must be one of '%s'",
                    $unsubscription_reason,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($unsubscription_reason)) {
            throw new \InvalidArgumentException('non-nullable unsubscription_reason cannot be null');
        }

        $this->container['unsubscription_reason'] = $unsubscription_reason;

        return $this;
    }

    /**
     * Gets unsubscription_observation
     *
     * @return string|null
     */
    public function getUnsubscriptionObservation()
    {
        return $this->container['unsubscription_observation'];
    }

    /**
     * Sets unsubscription_observation
     *
     * @param string|null $unsubscription_observation Unsubcription Observation
     *
     * @return self
     */
    public function setUnsubscriptionObservation($unsubscription_observation)
    {

        if (is_null($unsubscription_observation)) {
            throw new \InvalidArgumentException('non-nullable unsubscription_observation cannot be null');
        }

        $this->container['unsubscription_observation'] = $unsubscription_observation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


