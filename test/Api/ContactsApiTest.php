<?php
/**
 * ContactsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  EgoiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * APIv3 (Beta)
 *
 * # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB. <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace EgoiClient;

use \EgoiClient\Configuration;
use \EgoiClient\ApiException;
use \EgoiClient\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ContactsApiTest Class Doc Comment
 *
 * @category Class
 * @package  EgoiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContactsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for actionActivateContacts
     *
     * Activate contacts.
     *
     */
    public function testActionActivateContacts()
    {
    }

    /**
     * Test case for actionAttachTag
     *
     * Attach tag to contact.
     *
     */
    public function testActionAttachTag()
    {
    }

    /**
     * Test case for actionDeactivateContacts
     *
     * Deactivate contacts.
     *
     */
    public function testActionDeactivateContacts()
    {
    }

    /**
     * Test case for actionDetachTag
     *
     * Detach tag to contact.
     *
     */
    public function testActionDetachTag()
    {
    }

    /**
     * Test case for actionExportContacts
     *
     * Exports a list of contacts.
     *
     */
    public function testActionExportContacts()
    {
    }

    /**
     * Test case for actionForgetContacts
     *
     * Forget contacts.
     *
     */
    public function testActionForgetContacts()
    {
    }

    /**
     * Test case for actionImportBulk
     *
     * Import collection of contacts.
     *
     */
    public function testActionImportBulk()
    {
    }

    /**
     * Test case for actionStartAutomation
     *
     * Start automation.
     *
     */
    public function testActionStartAutomation()
    {
    }

    /**
     * Test case for actionUnsubscribeContact
     *
     * Unsubscribes contacts.
     *
     */
    public function testActionUnsubscribeContact()
    {
    }

    /**
     * Test case for createContact
     *
     * Create new contact.
     *
     */
    public function testCreateContact()
    {
    }

    /**
     * Test case for getAllContactActivities
     *
     * Get all contact activities.
     *
     */
    public function testGetAllContactActivities()
    {
    }

    /**
     * Test case for getAllContacts
     *
     * Get all contacts.
     *
     */
    public function testGetAllContacts()
    {
    }

    /**
     * Test case for getContact
     *
     * Get contact.
     *
     */
    public function testGetContact()
    {
    }

    /**
     * Test case for patchContact
     *
     * Update a specific contact.
     *
     */
    public function testPatchContact()
    {
    }

    /**
     * Test case for searchContacts
     *
     * Search contact.
     *
     */
    public function testSearchContacts()
    {
    }
}
